import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams.update({'figure.autolayout': True})
import argparse
import sys
import os
from matplotlib.backends.backend_pdf import PdfPages


# plotting functions
def plot_missingness_hist(imiss_file="plink.imiss", lmiss_file="plink.lmiss"):
    '''Plot histograms of SNP missingness for samples and SNPs. The input files should be
    generated by the "missingness_report()" function specified below.
    :param imiss_file: file containing SNP missingness for samples (individuals)
    :param lmiss_file: file containing SNP missignness for SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_missingness_hist()
    fig'''
    imiss = pd.read_csv(imiss_file, delimiter=" ", skipinitialspace=True)
    lmiss = pd.read_csv(lmiss_file, delimiter=" ", skipinitialspace=True)

    fig, ax = plt.subplots(1,2, figsize=(16,6), sharex=True)
    imiss.hist(column='F_MISS', ax=ax[0])
    ax[0].axvline(0.2, c='red', linestyle='--')
    ax[0].set_xlabel("Proportion of missing SNPs")
    ax[0].set_ylabel("Number of individuals")
    ax[0].set_title("Proportion of missing SNPs per individual \n (> 0.2 are removed)")
    lmiss['F_MISS'].hist(ax=ax[1])
    ax[1].axvline(0.2, c='red', linestyle='--')
    ax[1].set_xlabel("Proportion of individuals with missing SNPs")
    ax[1].set_ylabel("Number of SNPs")
    ax[1].set_title("Proportion of missing individuals per SNP \n (> 0.2 are removed)")
    return fig
    #plt.show()

def plot_sexcheck_hist(file="plink.sexcheck"):
    '''Plot histograms of inbreeding coefficents (F-values) for reported females and males. The input files should be
    generated by the "check_sex_report()" function specified below.
    :param file: file containing the calculated inbreeding coeffcients for all samples
    :return: matplotlib fig object
    :rtype object
    >>> plot_sexcheck_hist()
    fig'''
    sexcheck = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    females = sexcheck.loc[sexcheck['PEDSEX'] == 2]
    males = sexcheck.loc[sexcheck['PEDSEX'] == 1]

    fig, ax = plt.subplots(1, 2, figsize=(16,6))
    females.hist(column='F', ax=ax[0])
    ax[0].axvline(0.2, c='r', ls='--')
    ax[0].set_ylabel("Number of Individuals")
    ax[0].set_xlabel("F Value (X Chr Homozygosity Rates)")
    ax[0].set_title("Females (> 0.2 are removed)")
    males.hist(column='F', ax=ax[1])
    ax[1].axvline(0.8, c='r', ls='--')
    ax[1].set_ylabel("Number of Individuals")
    ax[1].set_xlabel("F Value (X Chr Homozygosity Rates)")
    ax[1].set_title("Males (< 0.8 are removed)")
    return fig
    #plt.show()

def plot_maf_hist(file="MAF_check.frq"):
    '''Plot histograms of minor allele frequency distributions for SNPs. The input file should be
    generated by the "maf_check_report()" function specified below.
    :param file: file containing the minor allele frequencies for all SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_maf_hist()
    fig'''
    maf = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    fig = plt.figure(figsize=(8,6))
    plt.hist(maf['MAF'])
    plt.title("MAF Distribution")
    plt.xlabel("MAF")
    plt.ylabel("Number of SNPs")
    return fig

def plot_maf_dropped_hist(threshold=0.05, file="MAF_check.frq"):
    '''Plot histograms of minor allele frequency (MAF) distributions for SNPs for specific frequency thresholds.
    The input file should be generated by the "maf_check_report()" function specified below.
    :param threshold: MAF threshold for removing SNPs with frequencies lower than this
    :param file: file containing the minor allele frequencies for all SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_maf_dropped_hist()
    fig'''
    maf = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    rare = maf.loc[maf['MAF'] < threshold]

    fig, ax = plt.subplots(1, 2, figsize=(16,6))
    maf.hist(column='MAF', ax=ax[0])
    ax[0].axvline(threshold, c='r', linestyle='--')
    ax[0].set_title("MAF Distribution of All SNPs\n (< 0.05 are removed)")
    ax[0].set_xlabel("MAF")
    ax[0].set_ylabel("Number of SNPs")
    rare.hist(column='MAF', ax=ax[1])
    ax[1].axvline(threshold, c='r', linestyle='--')
    ax[1].set_title("MAF Distribution of SNPs < {}".format(threshold))
    ax[1].set_xlabel("MAF")
    ax[1].set_ylabel("Number of SNPs")
    #plt.show()

    print("dropped SNPs: ", rare.shape[0])
    print("remaining SNPs: ", maf['SNP'].count() - rare['SNP'].count())
    return fig

def plot_hwe_hist(threshold=0.000001, file="plink.hwe"):
    '''Plot histograms of hardy-weinberg equilibrium (HWE) test p-value distributions for SNPs.
    The input file should be generated by the "hardy_weinberg_report()" function specified below.
    :param threshold: p-value threshold from HWE test for removings SNPs above this threshold
    :param file: file containing the HWE test results for all SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_hwe_hist()
    fig'''
    # default threshold used in tutorial
    hardy = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    zoomhwe = hardy[hardy['P'] < threshold]

    fig, ax = plt.subplots(1, 2, figsize=(16,6))
    plt.title("HWE Test")
    hardy.hist(column='P', ax=ax[0])
    ax[0].axvline(threshold, c='red', ls='--')
    ax[0].set_xlabel("HWE Exact Test P-Value")
    ax[0].set_ylabel("Number of SNPs")
    ax[0].set_title("HWE P-Value Distribution of All SNPs\n (< 1e-6 are removed)")
    zoomhwe.hist(column='P', ax=ax[1])
    ax[1].set_xlabel("HWE Exact Test P-Value")
    ax[1].set_ylabel("Number of SNPs")
    ax[1].set_title("HWE P-Value Distribution of SNPs < {}".format(threshold))
    ax[1].axvline(threshold, c='red', ls='--')
    #plt.show()

    print("number of strongly deviating SNPs: {} (threshold: {})".format(zoomhwe.shape[0], threshold))
    return fig

def plot_relatedness_scatter(infile):
    '''Plot scatter plot of crytpic relatedness.
    Input file should be generated by "relatedness_check_report()" function specified below.
    :param infile: file containing relatedness check results for all samples
    :return: matplotlib fig object
    :rtype object
    >>> plot_relatedness_scatter(pihat_min0.2.genome)
    fig'''
    from matplotlib.ticker import FormatStrFormatter

    relat = pd.read_csv(infile, delimiter=" ", skipinitialspace=True)
    print("number of founders: {}".format(relat.shape[0]))
    po_z_list = relat.loc[relat['RT'] == "PO"][['Z0', 'Z1']]
    un_z_list = relat.loc[relat['RT'] == "UN"][['Z0', 'Z1']]

    fig = plt.figure(figsize=(8,6))
    if po_z_list.empty and un_z_list.empty:
        print("no lists")
        return None
    elif po_z_list.empty:
        #un_z_list.plot(x='Z0', y='Z1', kind='scatter', xlim=[-0.05,1], ylim=[0,1.05], s=100)
        plt.scatter(x=un_z_list['Z0'], y=un_z_list['Z1'], s=100)
    elif un_z_list.empty:
        #po_z_list.plot(x='Z0', y='Z1', kind='scatter', xlim=[-0.05,1], ylim=[0,1.05], s=100)
        plt.scatter(x=po_z_list['Z0'], y=po_z_list['Z1'], s=100)
    else:
        print("list exists")
        # ax1 = po_z_list.plot(x='Z0', y='Z1', kind='scatter', xlim=[-0.05,1], ylim=[0,1.05], s=100)
        # un_z_list.plot(x='Z0', y='Z1', kind='scatter', s=100, c='green', facecolors='none', ax=ax1)
        plt.scatter(x=un_z_list['Z0'], y=un_z_list['Z1'], s=100)
        plt.scatter(x=po_z_list['Z0'], y=po_z_list['Z1'], s=100)
    plt.legend(['PO', 'UN'])
    plt.title("Z0 vs Z1 Values for Related (PO) and Unrelated (UN) Individuals")
    return fig

def calculate_missingness(df, column, threshold):
    '''Identify SNPs with a missingness rate below a certain threshold.
    :param df: dataframe containing all SNPs and their missingness rate
    :param column: column that contains missingness rate values within df
    :param threshold: threshold for removing SNPs above missingness rate
    :return: Pandas DataFrame object
    :rtype object
    >>> calculate_missingess(missigness_df, 'F_MISS', 0.05)
    missing'''
    missing = df.loc[df[column] < threshold]
    print("total removed: ", df.shape[0] - missing.shape[0])
    return missing

def get_sample_ids(df, column, filtered):
    '''Return sample IDs from one dataframe (df) that are present in another dataframe (filtered).
    :param df: dataframe that contains the samples to be filtered
    :param column: column that contains the sample IDs
    :param filtered: dataframe that contains the filtered samples
    :return: Pandas DataFrame object
    :rtype object
    >>> get_sample_ids(original_df, 'iid', fitlered_df)
    ids'''
    ids = df[~df[column].isin(filtered[column].tolist())][column]
    return ids

def make_autopct(values):
    def my_autopct(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '{p:.2f}%  ({v:d})'.format(p=pct,v=val)
    return my_autopct

def write_fail_file(ids_failed, filename="failed_ids"):
    '''Write either failed sample IDs or SNPs to two files.
    One is a human-readable csv file, the other is a csv file intended to be read into a Pandas DataFrame.
    :param ids_failed: dictionary that contains the QC checks and the corresponding failed ids.
    :param filename: name of the file to be written to
    >>> write_fail_file(ids_failed, failed_ids)
    '''
    hr = filename + "_hr.csv"
    pr = filename + "_pr.csv"
    with open(hr, "w") as f:
        for k,v in ids_failed.items():
            f.write(str(k) + ": " + str(v) + "\n")
    pd.DataFrame.from_dict(data=ids_failed, orient='index').to_csv(pr, header=True)


def sample_failed_report(write=True, imiss_file="plink.imiss", lmiss_file="plink.lmiss", sexcheck_file="plink.sexcheck",
                         het_failed_file="het_fail_ind.txt", ibd_state=True, ibd_file="pihat_min0.2_in_founders.genome"):
    ids = {}
    ids_list = []

    # SNP missingness
    imiss = pd.read_csv(imiss_file,  delimiter=" ", skipinitialspace=True)
    lmiss = pd.read_csv(lmiss_file,  delimiter=" ", skipinitialspace=True)
    ind_missing_filtered = calculate_missingness(imiss, 'F_MISS', 0.2)
    missing_ids = get_sample_ids(imiss, 'IID', ind_missing_filtered)

    ids['missing'] = missing_ids.tolist()
    ids_list.append(missing_ids.tolist())

    # mismatched sex
    sex = pd.read_csv("plink.sexcheck", delimiter=" ", skipinitialspace=True)
    sex_mismatches = sex.loc[sex['STATUS'] == "PROBLEM"]
    sex_mismatches_counts = sex['STATUS'].value_counts()
    print("total sex mismatches: ", sex_mismatches.shape[0])
    sex_mismatches_ids = sex_mismatches['IID'].tolist()

    ids['sex_mismatches'] = sex_mismatches_ids
    ids_list.append(sex_mismatches_ids)

    # outlying heterozygosity
    het_failed = pd.read_csv("het_fail_ind.txt", delimiter=" ")
    het_failed_ids = het_failed['IID'].tolist()
    print("total het failed mismatches: ", len(het_failed_ids))

    ids['het_failed'] = het_failed_ids
    ids_list.append(het_failed_ids)

    # high IBD - pi_hat threshold
    if ibd_state:
        ibd = pd.read_csv("pihat_min0.2_in_founders.genome", delimiter=" ", skipinitialspace=True)
        print("total ibd failures: ", ibd.shape[0])
        ibd_ids = ibd['IID1'].tolist()
        ids['relatedness_failed'] = ibd_ids
        ids_list.append(ibd_ids)
        # graph everything
        tests = ['SNP Missingness', 'Sex Mismatches', 'Outlying Heterozygosity', 'Cryptic Relatedness']
        fail_counts = [len(missing_ids), len(sex_mismatches_ids), len(het_failed_ids), len(ibd_ids)]
        total_fails = set(x for l in ids_list for x in l)
        print("total samples failed: {}/{}".format(len(total_fails), imiss.shape[0]))

    else:
        # graph everything
        tests = ['SNP Missingness', 'Sex Mismatches', 'Outlying Heterozygosity']
        fail_counts = [len(missing_ids), len(sex_mismatches_ids), len(het_failed_ids)]
        total_fails = set(x for l in ids_list for x in l)
        print("total samples failed: {}/{}".format(len(total_fails), imiss.shape[0]))

    fig = plt.figure(figsize=(8,6))
    plt.tight_layout()
    plt.bar(x=tests, height=fail_counts)
    plt.title("Samples failing QC checks (total: {}/{})".format(len(total_fails), imiss.shape[0]))
    plt.xlabel("QC Test")
    plt.ylabel("Number of samples")
    plt.tick_params(axis='x', rotation=90)

    if write:
        write_fail_file(ids, "failed_sample_ids")

    return fig

## Overall analysis for failed SNPs

# Missing SNPs (> 2%)

def snps_failed_report(write=False, miss_threshold=0.2, maf_threshold=0.00001, hwe_threshold=1e-6,lmiss_file="plink.lmiss", maf_file="MAF_check.frq", hwe_file="plink.hwe"):
    snps = {}
    ids_list = []
    lmiss = pd.read_csv(lmiss_file, delimiter=" ", skipinitialspace=True)

    missing_snps = lmiss.loc[lmiss['F_MISS'] > miss_threshold]
    snps['missing_snps'] = missing_snps['SNP'].tolist()
    ids_list.append(missing_snps['SNP'].tolist())
    print("total missing snps failed: ", len(missing_snps['SNP'].tolist()))

    # MAF
    maf = pd.read_csv(maf_file, delimiter=" ", skipinitialspace=True)
    rare = maf.loc[maf['MAF'] < maf_threshold]
    snps['maf'] = rare['SNP'].tolist()
    ids_list.append(rare['SNP'].tolist())
    print("total maf snps failed: ", len(rare['SNP'].tolist()))

    # HWE departures
    hardy = pd.read_csv(hwe_file, delimiter=" ", skipinitialspace=True)
    hwe_failed = hardy.loc[hardy['P'] < hwe_threshold]
    snps['hwe'] = hwe_failed['SNP'].tolist()
    ids_list.append(hwe_failed['SNP'].tolist())
    print("total hwe snps failed: ", len(hwe_failed['SNP'].tolist()))

    # graph everything
    tests = ['SNP Missingness', 'Minor Allele Frequency', 'Outlying HWE']
    fail_counts = [len(missing_snps['SNP'].tolist()), len(rare['SNP'].tolist()), len(hwe_failed['SNP'].tolist())]
    total_fails = set(x for l in ids_list for x in l)
    print("total fails: ", len(total_fails))

    fig = plt.figure(figsize=(8,6))
    plt.tight_layout()
    plt.bar(x=tests, height=fail_counts)
    plt.title("SNPs failing QC checks (total: {}/{})".format(len(total_fails), lmiss.shape[0]))
    plt.xlabel("QC Test")
    plt.ylabel("Number of SNPs")
    plt.tick_params(axis='x', rotation=90)

    if write:
        write_fail_file(snps, "failed_snps_ids")

    return fig

def save_pdf(infile, plots):
    ''' Write a list of matplotlib Figure objects to a pdf file in the current working directory.
    :param infile: prefix of the plink input files
    :param plots: list of Figure objects to written to pdf file
    >>> save_pdf("HapMap_3_r3_1", figures)
    "HapMap_3_r3_1_qc_report.pdf"'''

    title = infile + "_qc_report.pdf"

    with PdfPages(title) as pdf:
        for plot in plots:
            pdf.savefig(plot)


def main(bfile, ibd_state=True):
    figures = []
    print("Generating samples failed report")
    samples_failed_fig = sample_failed_report(ibd_state=ibd_state)
    figures.append(samples_failed_fig)

    print("Generating snps failed report")
    snps_failed_fig = snps_failed_report()
    figures.append(snps_failed_fig)

    report = bfile + "_snps_samples"
    save_pdf(report, figures)

if __name__=="__main__":
    bfile = sys.argv[1]
    main(bfile, ibd_state=False)
