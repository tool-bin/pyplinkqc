import numpy as np
import pandas as pd
import argparse
from pygen.quality_control import qc_samples as qcsamples
from pygen.quality_control import qc_snps as qcsnps
from pygen.association import association
from pygen import quality_control

#import utils

## This script implements quality control procedures on UKBB genotype data. It uses the default thresholds provided by Ben Neale's lab (http://www.nealelab.is/blog/2017/9/11/details-and-considerations-of-the-uk-biobank-gwas)

##Steps:
#1. Filter EIDs based UKBB QC data for all chromosomes
#2. Create plink binary files with phenotype annotations for all chromosomes
#3. Run QC steps for all chromosomes
    # sample missingness is skipped because outliers have already been filtered in step 1 - also the data is stored per chromosome so the proportion of missing SNPs per individuals is not possible to calculate without merging these data. Merging leads to memory issues.
    # sex discrepancy step is skipped because these individuals are already removed from step 1
#4. Analyse QC results
#5. Perform GWAS for phenotype


def _get_query(keys: list) -> str:
    """Returns a regex string for a pd.DataFrame filter function.

    Keyword arguments:
    ------------------
    keys: list[str]
        a list of datafield collected from the UKBB Data Showcase website e.g 41270

    Returns:
    --------
    regex_string: str
        regex string to filter columns

    """

    start = r"^eid"
    end = r''.join(r"|^{}$|^{}-".format(i, i) for i in keys)
    regex_string = start + end
    return regex_string


def get_columns(main_filename: str, keys: list, nrows: int = None, out_filename: str = "", write: bool = False) -> \
        pd.DataFrame:
    """Returns a dataframe by selecting all relevant keys based on the given key(s).

    Optionally write the dataframe to a csv file.

    Keyword arguments:
    ------------------
    main_filename: str
        file location of the main dataset file
    keys: list[str]
        list of keys (data column_keys) for which to extract columns
    nrows: int
        number of rows to be read. If None, all rows are read.
    out_filename: str
        location to store the file if write == True
    write: bool
        if True, resulting dataframe is written to file out_filename

    Returns:
    --------
    main_df: pd.DataFrame
        filtered dataframe

    """

    main_df = pd.read_csv(main_filename, nrows=1, dtype='string')
    keys_query = _get_query(keys)
    col_list = main_df.filter(regex=keys_query).columns.tolist()
    filtered_df = pd.read_csv(main_filename, usecols=col_list, dtype=str, nrows=nrows)
    if write:
        print("Writing file")
        filtered_df.to_csv(out_filename, index=False)
    return filtered_df



def filter_main_qc(main_filename: str, datafields: list, outfile: str="ukbb_qc_eids.txt") -> list:
    """Return list of IDs that pass quality control steps performed by UKBB from the UKBB main dataset.

    Write the IDs to a text file.

    Keyword arguments:
    ------------------
    main_filename: str
        file name and location of the UKBB main dataset file
    datafields: list[str]
        list of datafields to use for quality control filtering - should be ['22006', '22027', '22021', '22019', '22001', '31']
    outfile: str
        name of file to store the list of QC'd IDs in
    Returns:
    --------
    qc_ids: list
        filtered list of IDs

    """
    # Genotype-related QC fields
    # dataFields should include ['22006', '22027', '22021', '22019', '22001', '31']
    main = get_columns(main_filename, datafields)
    # only white british ancestry
    causian_main = main[main['22006-0.0'] == '1']
    # exclude heterozygosity and missingness outliers
    het_inliers = causian_main[causian_main['22027-0.0'] != '1']
    # exclude kinship outliers
    kinship_inliers = het_inliers[het_inliers['22021-0.0'] != '-1']
    # exclude relatives
    kinship_filtered = kinship_inliers[kinship_inliers['22021-0.0'] == '0']
    # exclude sex aneuploidies
    sex_filtered = kinship_filtered[kinship_filtered['22019-0.0'] != '1']
    # exclude inviduals with discrepancies between genetic sex and self-reported sex
    sex_dis_filtered = sex_filtered[sex_filtered['31-0.0'] == sex_filtered['22001-0.0']]

    plink_file = sex_dis_filtered[['eid', 'eid']]
    plink_file.to_csv("include_qc_eids.txt", sep=" ", index=False, header=False)
    return sex_dis_filtered['eid']

def read_file(file: str):
    """ Function to read file containing list of IDs generated by ukbcohort tool.

    Keyword arguments:
    ------------------
    file: str
        file name
    Returns:
    --------
    lines: list
        list of IDs

    """
    lines = []
    with open(file) as f:
        for line in f.read().split(","):
            if line != "":
                lines.append(line)
    return lines

def convert_eid_pheno(eid_file: str, pheno_out: str):
    """ Function to convert a file containing IDs to a phenotype file for consumption by PLINK

    Keyword arguments:
    ------------------
    eid_file: str
        file name containing list of IDs (most likely generated by ukbcohort module)
    pheno_out: str
        file name to write phenotype file to
    Returns:
    --------

    """
    eids_list = read_file(eid_file)
    with open(pheno_out, "w") as f:
        for line in eids_list:
            if line != ',':
                f.write("{} {}".format(line, line) + "\n")

def qc_samples(bfile_path, bfile_name):
    """ Function to run QC steps on samples (individuals)

    Keyword arguments:
    ------------------
    bfile_path: str
        path of binary PLINK file prefix
    bfile_name: str
        name of binary PLINK file prefix
    Returns:
    --------

    """
    ## Set parameters to those used in Ben Neale's documentation
    snp_missingness_cutoff=0.2

    qc_samples = qcsamples.QcSamples()

    bfile = bfile_path + "/" + bfile_name

    snps_missing_fig = qc_samples.check_snp_missingness(bfile=bfile, snp_missingness_cutoff=snp_missingness_cutoff)

    sex_discrepancy_fig = qc_samples.check_sex_discrepancy(bfile="snp_missingness_filtered")

    het_rate_fig = qc_samples.check_heterozygosity_rate(bfile="sex_discrepancy_filtered")

    related_fig = qc_samples.check_cryptic_relatedness(bfile="heterozygosity_filtered")

    qc_samples.samples_failed_gen_report(bfile=bfile, snp_missingness_cutoff=snp_missingness_cutoff)

def qc_snps(bfile_path: str, bfile_name: str):
    """ Function to run QC steps on SNPs

    Keyword arguments:
    ------------------
    bfile_path: str
        path of binary PLINK file prefix
    bfile_name: str
        name of binary PLINK file prefix
    Returns:
    --------

    """
    ## Set parameters to those used in Ben Neale's documentation
    snp_missingness_cutoff=0.2
    get_autosomal=False
    maf_threshold=0.01
    hwe_threshold=1e-10

    qc_snps = qcsnps.QcSnps()

    snps_missing_fig = qc_snps.check_snp_missingness(bfile=bfile_name, snp_missingness_cutoff=snp_missingness_cutoff, bfile_out=bfile_path+"/snp_missingness_filtered")

    maf_check, maf_drop = qc_snps.check_maf(bfile=bfile_path+"/snp_missingness_filtered", get_autosomal=get_autosomal, maf_threshold=maf_threshold, bfile_out=bfile_path+"/maf_filtered")

    hwe_check = qc_snps.check_hwe(bfile=bfile_path+"/maf_filtered", hwe_threshold=hwe_threshold, bfile_out=bfile_path+"/hwe_filtered")

    qc_snps.snps_failed_gen_report(bfile=bfile_name, snp_missingness_cutoff=snp_missingness_cutoff, maf_threshold=maf_threshold, hwe_threshold=hwe_threshold)

def qc_all(bfile_path, bfile_name):
    """ Function to run QC steps on samples and SNPs

    Keyword arguments:
    ------------------
    bfile_path: str
        path of binary PLINK file prefix
    bfile_name: str
        name of binary PLINK file prefix
    Returns:
    --------

    """
    ## Set parameters to those used in Ben Neale's documentation
    snp_missingness_cutoff=0.2
    get_autosomal=False
    maf_threshold=0.01
    hwe_threshold=1e-10

    qc_samples = qcsamples.QcSamples()
    qc_snps = qcsnps.QcSnps()

    snps_missing_fig = qc_snps.check_snp_missingness(bfile=bfile_name, snp_missingness_cutoff=snp_missingness_cutoff, bfile_out=bfile_path+"/snp_missingness_filtered")

    maf_check, maf_drop = qc_snps.check_maf(bfile=bfile_path+"/snp_missingness_filtered", get_autosomal=get_autosomal, maf_threshold=maf_threshold, bfile_out=bfile_path+"/maf_filtered")

    hwe_check = qc_snps.check_hwe(bfile=bfile_path+"/maf_filtered", hwe_threshold=hwe_threshold, bfile_out=bfile_path+"/hwe_filtered")

    het_rate_fig = qc_samples.check_heterozygosity_rate(bfile=bfile_path+"/hwe_filtered", bfile_out=bfile_path+"/heterozygosity_filtered")

    # related_fig = qc_samples.check_cryptic_relatedness(bfile=bfile_path+"/heterozygosity_filtered", bfile_out=bfile_path+"/relatedness_filtered")
    #bfile = bfile_path + "/" + bfile_name
    qc_samples.samples_failed_gen_report(bfile=bfile_name, snp_missingness_cutoff=snp_missingness_cutoff, sexcheck_file="", ibd_file="")

    qc_snps.snps_failed_gen_report(bfile=bfile_name, snp_missingness_cutoff=snp_missingness_cutoff, maf_threshold=maf_threshold, hwe_threshold=hwe_threshold)


def main(bfile_path: str, bfile_name: str, cohort_file: str, main_file: str="", filter_file: str="", full: bool=True, sample: bool=False, snp: bool=False, assoc: bool=False, assoc_out: str="snp_association"):
    bfile = bfile_path + "/" + bfile_name
    if main_file != "":
        print("main file: ", main_file)
        datafields = ['22006', '22027', '22021', '22019', '22001', '31']
        qc_eids = filter_main_qc(main_file, datafields)
        bfile_out = bfile + "_qc_filtered"
        quality_control.filter.individual_filter(bfile=bfile, keepfile="ukbb_qc_eids.txt", outfile=bfile_out)
        bfile = bfile_out
    if filter_file != "":
        print("filtering plinks files using {}".format(filter_file))
        bfile_out = bfile + "_eid_filtered"
        quality_control.filter.individual_filter(bfile=bfile, keepfile=filter_file, outfile=bfile_out)
        bfile = bfile_out
    bfile_pheno = bfile + "_pheno"
    cohort_file_out = cohort_file[:-4] + "_pheno.txt"
    convert_eid_pheno(cohort_file, cohort_file_out)
    association.generate_pheno_plink(bfile, cohort_file_out, bfile_pheno)
    if sample:
        qc_samples(bfile_path=bfile_path, bfile_name=bfile_pheno)
    elif snp:
        qc_snps(bfile_path=bfile_path, bfile_name=bfile_pheno)
    elif assoc:
        association.perform_cov_assoc(bfile=bfile, outfile=assoc_out)
    else:
        qc_all(bfile_path=bfile_path, bfile_name=bfile_pheno)
        association.perform_cov_assoc(bfile=bfile_path+"/heterozygosity_filtered", outfile=assoc_out)


if __name__=="__main__":
    ## Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("bfile_path", help="provide the path to the directory contain the plink files prefix name for the .bed, .fam files (e.g /path/to/dir)")
    parser.add_argument("bfile_name", help="provide the prefix name for the .bed, .fam files (e.g HapMap_3_r3_1")
    parser.add_argument("cohort_file", help="provide the cohort file for case-control phenotype generation - expects a file containing comma separated list of IDs")
    parser.add_argument("-main_file", help="option to provide path to main UKBB dataset file to generate list of QC'd individuals", default="")
    parser.add_argument("-filter_file", help="option to filter plink files for a specific set of individuals. provide the include file with EIDs as input to this argument", default="")
    #parser.add_argument("-full", help="run full QC analysis on samples and SNPs", action="store_true", default=False)
    parser.add_argument("-only_samples", help="option to only run QC on the samples (individuals)", action="store_true", default=False)
    parser.add_argument("-only_snps", help="option to only run QC on the SNPs", action="store_true", default=False)
    parser.add_argument("-only_assoc", help="option to run only association", action="store_true", default=False)

    args = parser.parse_args()
    bfile_path = args.bfile_path
    bfile_name = args.bfile_name
    cohort_file = args.cohort_file
    main_file = args.main_file
    filter_file = args.filter_file
    #full_var = args.full
    sample_var = args.only_samples
    snp_var = args.only_snps
    assoc_var = args.only_assoc

    main(bfile_path=bfile_path, bfile_name=bfile_name, cohort_file=cohort_file, main_file=main_file, filter_file=filter_file, sample=sample_var, snp=snp_var, assoc=assoc_var)
