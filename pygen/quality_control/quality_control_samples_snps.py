import numpy as np
import pandas as pd
import argparse
import qc_samples as qcsamples
import qc_snps as qc_snps



## This script implements the main QC steps outlined in the first part of "https://github.com/MareesAT/GWA_tutorial/"
## It is specific for UKBB genotype data, and follows on from the QC steps performed by the UKBB team
## First we filter the .fam files for individuals that passed the QC procedures perfored by the UKBB team
## With these updated plink files, we perform the standard QC steps as recommended by Ben Neale's group (http://www.nealelab.is/blog/2017/9/11/details-and-considerations-of-the-uk-biobank-gwas)


def qc_samples(bfile):
    figures = []

    print("Running QC only on samples")
    print("step 1: check snp missingness")
    miss_out = "plink"
    report.missingness_report(bfile, miss_out)
    missing_figs = plot.plot_missingness_hist()
    figures.append(missing_figs)

    print("step 1a: filter missing individuals under threshold 0.2")
    ind_geno_out = filter.ind_genotype_filter(bfile, 0.2)

    # print("step 1b: filter missing individuals under threshold 0.02")
    # ind_geno_out_2 = ind_genotype_filter(ind_geno_out, 0.02)

    print("step 2: check for sex discrepancy")
    report.check_sex(ind_geno_out)
    report.check_sex_report()
    check_sex_figs = plot.plot_sexcheck_hist()
    figures.append(check_sex_figs)

    print("step 2a: filter individuals with sex discrepancy")
    remove_sex_file = filter.remove_sex(ind_geno_out, remove_file="sex_discrepancy.txt")

    print("step 3: check heterozygosity rates and filter individuals with deviating rates")
    print("step 3a: get list of non-(highly) correlated snps")
    ld_out = "ld_check"
    snp_file = "indepSNP" #list of independent snps generated by ld_pruning_filter function
    filter.ld_pruning_filter(remove_sex_file, snp_file, ld_out)

    print("step 3b: get list of strongly deviating individuals")
    ld_in = ld_out + ".het"
    het_fail_file = "het_fail_ind.txt"
    report.heterozygosity_ind_report(ld_in, het_fail_file)

    print("step 3c: filter individuals with strongly deviating heterozygosity rates")
    hetero_filtered = filter.heterozygosity_filter(remove_sex_file, het_fail_file)

    print("step 4: check individuals for cryptic relatedness")
    snp_file_in = snp_file + ".prune.in"
    relatedness_out = "pihat_min0.2"
    report.relatedness_check_report(hetero_filtered, snp_file_in, relatedness_out, threshold=0.2)
    relatedness_out_name = relatedness_out + ".genome"
    relat_figs = plot.plot_relatedness_scatter(relatedness_out_name)
    figures.append(relat_figs)

    print("step 4a: filter founder individuals")
    founder_filtered = filter.founders_filter(hetero_filtered)

    print("step 4b: repeat check for cryptic relatedness in founder individuals")
    relat_filtered_out = "pihat_min0.2_in_founders"
    report.relatedness_check_report(founder_filtered, snp_file_in, relat_filtered_out, threshold=0.2)
    relat_filtered_out_name = relat_filtered_out + ".genome"
    relat_filt_figs = plot.plot_relatedness_scatter(relat_filtered_out_name)

    if relat_filt_figs is not None:
        figures.append(relat_filt_figs)

        print("step 4c: for individuals breaching the pi_hat threshold, remove individual with lowest call rate")
        found_miss = "founders"
        report.missingness_report(founder_filtered, found_miss)
        low_call_out = "related_low_call_rate.txt"
        found_imiss = found_miss + ".imiss"
        related_filtered_file = relat_filtered_out + ".genome"
        report.relatives_low_call_rate_report(found_imiss,related_filtered_file, low_call_out)
        related_filtered = filter.relatedness_filter(founder_filtered, low_call_out)

    print("Generating samples failed report")
    samples_failed_fig = report.sample_failed_report()
    figures.append(samples_failed_fig)

    report = bfile + "_samples_only"
    report.save_pdf(report, figures)

def qc_snps(bfile):
    figures = []

    print("Running QC only on SNPs")
    print("step 1: check snp missingness")
    miss_out = "plink"
    report.missingness_report(bfile, miss_out)
    missing_figs = plot.plot_missingness_hist()
    figures.append(missing_figs)

    print("step 1a: filter missing snps under threshold 0.2")
    snp_geno_out = filter.snp_genotype_filter(bfile, 0.2)

    print("step 2: select autosomal SNPs and filter for low MAF")
    bim_file = snp_geno_out + ".bim"

    print("step 2a: generate file with autosomal snps")
    filter.autosomal_snps_filter(bim_file)

    print("step 2b: filter for autosomal snps")
    auto_file = filter.select_autosomal_snp(snp_geno_out)

    print("step 2c: check MAF distributions")
    report.maf_check_report(auto_file)
    maf_check_figs = plot.plot_maf_hist()
    #figures.append(maf_check_figs)

    print("step 2d: filter snps with low MAF (default threshold: 0.05)")
    maf_filtered = filter.maf_filter(auto_file, threshold=0.05)
    maf_drop_figs = plot.plot_maf_dropped_hist()
    figures.append(maf_drop_figs)

    print("step 3: check hardy-weinberg equilibrium")
    report.hardy_weinberg_report(maf_filtered)
    hwe_figs = plot.plot_hwe_hist()
    figures.append(hwe_figs)

    print("step 3a: filter controls with stringent hwe threshold")
    out = "_control_threshold"
    hwe_control = filter.hardy_weinberg_filter(maf_filtered, out, threshold=1e-6)

    print("step 3b: filter cases with less stringest hwe threshold")
    out2 = "_case_threshold"
    hwe_cases = filter.hardy_weinberg_filter(hwe_control, out2, control=False, threshold=1e-10)

    snps_failed_fig = report.snps_failed_report()
    figures.append(snps_failed_fig)
    report = bfile + "_snps_only"
    report.save_pdf(bfile, figures)

def qc_all(bfile):
    qc_samples = qcsamples.QcSamples()
    qc_snps = qcsnps.QcSnps()
    # Only check missingness of SNPs as samples with outliers for missingness have already been filtered
    snps_missing_fig = qc_samples.check_snp_missingness(bfile=bfile)

    sex_discrepancy_fig = qc_samples.check_sex_discrepancy()

    het_rate_fig = qc_samples.check_heterozygosity_rate()

    related_fig = qc_samples.check_cryptic_relatedness()


def qc_sample_snps(bfile):
    figures = []

    print("Running full QC on samples and SNPs")
    print("step 1: check snp missingness")
    miss_out = "plink"
    report.missingness_report(bfile, miss_out)
    missing_figs = plot.plot_missingness_hist()
    figures.append(missing_figs)

    print("step 1a: filter missing snps under threshold 0.2")
    # remove SNPs with a missingness rate of greater than 2%
    snp_geno_out = filter.snp_genotype_filter(bfile, 0.2)

    print("step 1b: filter missing individuals under threshold 0.2")
    # remove individuals with a percentage of missing SNPs greater than 2%
    ind_geno_out = filter.ind_genotype_filter(snp_geno_out, 0.2)

    # print("step 1c: filter missing snps under threshold 0.02")
    # snp_geno_out_2 = snp_genotype_filter(ind_geno_out, 0.02)
    #
    # print("step 1d: filter missing individuals under threshold 0.02")
    # ind_geno_out_2 = ind_genotype_filter(snp_geno_out_2, 0.02)

    print("step 2: check for sex discrepancy")
    report.check_sex(ind_geno_out)
    reort.check_sex_report()
    check_sex_figs = plot.plot_sexcheck_hist()
    figures.append(check_sex_figs)

    print("step 2a: filter individuals with sex discrepancy")
    # remove individuals with discrepancy between reported gender and the genetic gender
    remove_sex_file = filter.remove_sex(ind_geno_out, remove_file="sex_discrepancy.txt")

    print("step 3: select autosomal SNPs and filter for low MAF")
    bim_file = remove_sex_file + ".bim"

    print("step 3a: generate file with autosomal snps")
    filter.autosomal_snps_filter(bim_file)

    print("step 3b: filter for autosomal snps")
    auto_file = filter.select_autosomal_snp(remove_sex_file)

    print("step 3c: check MAF distributions")
    report.maf_check_report(auto_file)
    maf_check_figs = plot.plot_maf_hist()
    #figures.append(maf_check_figs)

    print("step 3d: filter snps with low MAF")
    # remove SNPs with a minor allele frequency less than 0.05 (i.e less than 5% of individuals have the minor allele for the SNP)
    maf_filtered = fitler.maf_filter(auto_file, threshold=0.05)
    maf_drop_figs = plot.plot_maf_dropped_hist()
    figures.append(maf_drop_figs)

    print("step 4: check hardy-weinberg equilibrium")
    # remove SNPs with allele frequencies that deviate from their expected frequencies as determined by HWE
    report.hardy_weinberg_report(maf_filtered)
    hwe_figs = plot.plot_hwe_hist()
    figures.append(hwe_figs)

    print("step 4a: filter controls with stringent hwe threshold")
    out = "_control_threshold"
    hwe_control = filter.hardy_weinberg_filter(maf_filtered, out, threshold=1e-6)

    print("step 4b: filter cases with less stringest hwe threshold")
    out2 = "_case_threshold"
    hwe_cases = filter.hardy_weinberg_filter(hwe_control, out2, control=False, threshold=1e-10)

    print("step 5: check heterozygosity rates and filter individuals with deviating rates")
    print("step 5a: get list of non-(highly) correlated snps")
    ld_out = "ld_check"
    snp_file = "indepSNP"
    filter.ld_pruning_filter(hwe_cases, snp_file, ld_out)

    print("step 5b: get list of strongly deviating individuals")
    ld_in = ld_out + ".het"
    filter.heterozygosity_ind_filter(ld_in, "het_fail_ind.txt")

    print("step 5c: filter individuals with strongly deviating heterozygosity rates")
    # remove SNPs with large heterozygosity rates, deviating from the expected rates under HWE
    hetero_filtered = filter.heterozygosity_filter(hwe_cases, "het_fail_ind.txt")

    print("step 6: check individuals for cryptic relatedness")
    snp_file_in = snp_file + ".prune.in"
    relatedness_out = "pihat_min0.2"
    report.relatedness_check_report(hetero_filtered, snp_file_in, relatedness_out, threshold=0.2)
    relatedness_out_name = relatedness_out + ".genome"
    relat_figs = plot.plot_relatedness_scatter(relatedness_out_name)
    figures.append(relat_figs)

    print("step 6a: filter founder individuals")
    founder_filtered = filter.founders_filter(hetero_filtered)

    print("step 6b: repeat check for cryptic relatedness in founder individuals")
    relat_filtered_out = "pihat_min0.2_in_founders"
    report.relatedness_check_report(founder_filtered, snp_file_in, relat_filtered_out, threshold=0.2)
    relat_filtered_out_name = relat_filtered_out + ".genome"
    relat_filt_figs = plot.plot_relatedness_scatter(relat_filtered_out_name)
    if relat_filt_figs is not None:
        figures.append(relat_filt_figs)

        print("step 6c: for individuals breaching the pi_hat threshold, remove individual with lowest call rate")
        found_miss = "founders"
        report.missingness_report(founder_filtered, found_miss)
        low_call_out = "related_low_call_rate.txt"
        found_imiss = found_miss + ".imiss"
        related_filtered_file = relat_filtered_out + ".genome"
        filter.relatives_low_call_rate_filter(found_imiss,related_filtered_file, low_call_out)
        related_filtered = filter.relatedness_filter(founder_filtered, low_call_out)

    print("Generating samples failed report")
    samples_failed_fig = report.sample_failed_report()
    figures.append(samples_failed_fig)

    print("Generating snps failed report")
    snps_failed_fig = report.snps_failed_report()
    figures.append(snps_failed_fig)

    report = bfile + "_snps_samples"
    report.save_pdf(report, figures)


def main(bfile, full=True, sample=False, snp=False):
    if full:
        qc_sample_snps(bfile)
    elif sample:
        qc_samples(bfile)
    elif snp:
        qc_snps(bfile)


if __name__=="__main__":
    ## Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("bfile", help="provide the prefix name for the .bed, .fam files (e.g HapMap_3_r3_1(.bed, .bim, .fam))")
    #parser.add_argument("-plink_path", help="path to plink executable")
    parser.add_argument("-full", help="run full QC analysis on samples and SNPs", action="store_true", default=False)
    parser.add_argument("-only_samples", help="option to only run QC on the samples (individuals)", action="store_true", default=False)
    parser.add_argument("-only_snps", help="option to only run QC on the SNPs", action="store_true", default=False)

    args = parser.parse_args()
    bfile = args.bfile
    #plink_path = args.plink_path
    full_var = args.full
    sample_var = args.only_samples
    snp_var = args.only_snps

    print("Running program with arguments: bfile: {}, full: {}, only samples: {}, only snps: {}".format(bfile, full_var, sample_var, snp_var))
    main(bfile, full=full_var, sample=sample_var, snp=snp_var)
