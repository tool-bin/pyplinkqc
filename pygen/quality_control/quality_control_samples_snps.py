import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams.update({'figure.autolayout': True})
import argparse
import sys
import os
from matplotlib.backends.backend_pdf import PdfPages

# plotting functions
def plot_missingness_hist(imiss_file="plink.imiss", lmiss_file="plink.lmiss"):
    '''Plot histograms of SNP missingness for samples and SNPs. The input files should be
    generated by the "missingness_report()" function specified below.
    :param imiss_file: file containing SNP missingness for samples (individuals)
    :param lmiss_file: file containing SNP missignness for SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_missingness_hist()
    fig'''
    imiss = pd.read_csv(imiss_file, delimiter=" ", skipinitialspace=True)
    lmiss = pd.read_csv(lmiss_file, delimiter=" ", skipinitialspace=True)

    fig, ax = plt.subplots(1,2, figsize=(16,6), sharex=True)
    imiss.hist(column='F_MISS', ax=ax[0])
    ax[0].axvline(0.2, c='red', linestyle='--')
    ax[0].set_xlabel("Proportion of missing SNPs")
    ax[0].set_ylabel("Number of individuals")
    ax[0].set_title("Proportion of missing SNPs per individual \n (> 0.2 are removed)")
    lmiss['F_MISS'].hist(ax=ax[1])
    ax[1].axvline(0.2, c='red', linestyle='--')
    ax[1].set_xlabel("Proportion of individuals with missing SNPs")
    ax[1].set_ylabel("Number of SNPs")
    ax[1].set_title("Proportion of missing individuals per SNP \n (> 0.2 are removed)")
    return fig
    #plt.show()

def plot_sexcheck_hist(file="plink.sexcheck"):
    '''Plot histograms of inbreeding coefficents (F-values) for reported females and males. The input files should be
    generated by the "check_sex_report()" function specified below.
    :param file: file containing the calculated inbreeding coeffcients for all samples
    :return: matplotlib fig object
    :rtype object
    >>> plot_sexcheck_hist()
    fig'''
    sexcheck = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    females = sexcheck.loc[sexcheck['PEDSEX'] == 2]
    males = sexcheck.loc[sexcheck['PEDSEX'] == 1]
    #problems = sexcheck.loc[sexcheck['STATUS'] == "PROBLEM"]

    # labels=['Matches', 'Mismatches']
    # #print("number of problems: ", problems.shape[0], "\ndetails: \n", problems.iloc[:, :2])
    # plt.title("Sex mismatches")
    # print(counts)
    # plt.pie(counts, autopct=make_autopct(counts))
    # plt.legend(labels, loc="right", bbox_to_anchor=(1, 0, 0.5, 1))
    # plt.show()

    fig, ax = plt.subplots(1, 2, figsize=(16,6))
    females.hist(column='F', ax=ax[0])
    ax[0].axvline(0.2, c='r', ls='--')
    ax[0].set_ylabel("Number of Individuals")
    ax[0].set_xlabel("F Value (X Chr Homozygosity Rates)")
    ax[0].set_title("Females (> 0.2 are removed)")
    males.hist(column='F', ax=ax[1])
    ax[1].axvline(0.8, c='r', ls='--')
    ax[1].set_ylabel("Number of Individuals")
    ax[1].set_xlabel("F Value (X Chr Homozygosity Rates)")
    ax[1].set_title("Males (< 0.8 are removed)")
    return fig
    #plt.show()

def plot_maf_hist(file="MAF_check.frq"):
    '''Plot histograms of minor allele frequency distributions for SNPs. The input file should be
    generated by the "maf_check_report()" function specified below.
    :param file: file containing the minor allele frequencies for all SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_maf_hist()
    fig'''
    maf = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    fig = plt.figure(figsize=(8,6))
    plt.hist(maf['MAF'])
    plt.title("MAF Distribution")
    plt.xlabel("MAF")
    plt.ylabel("Number of SNPs")
    return fig

def plot_maf_dropped_hist(threshold=0.05, file="MAF_check.frq"):
    '''Plot histograms of minor allele frequency (MAF) distributions for SNPs for specific frequency thresholds.
    The input file should be generated by the "maf_check_report()" function specified below.
    :param threshold: MAF threshold for removing SNPs with frequencies lower than this
    :param file: file containing the minor allele frequencies for all SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_maf_dropped_hist()
    fig'''
    maf = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    rare = maf.loc[maf['MAF'] < threshold]

    fig, ax = plt.subplots(1, 2, figsize=(16,6))
    maf.hist(column='MAF', ax=ax[0])
    ax[0].axvline(threshold, c='r', linestyle='--')
    ax[0].set_title("MAF Distribution of All SNPs\n (< 0.05 are removed)")
    ax[0].set_xlabel("MAF")
    ax[0].set_ylabel("Number of SNPs")
    rare.hist(column='MAF', ax=ax[1])
    ax[1].axvline(threshold, c='r', linestyle='--')
    ax[1].set_title("MAF Distribution of SNPs < {}".format(threshold))
    ax[1].set_xlabel("MAF")
    ax[1].set_ylabel("Number of SNPs")
    #plt.show()

    print("dropped SNPs: ", rare.shape[0])
    print("remaining SNPs: ", maf['SNP'].count() - rare['SNP'].count())
    return fig

def plot_hwe_hist(threshold=0.000001, file="plink.hwe"):
    '''Plot histograms of hardy-weinberg equilibrium (HWE) test p-value distributions for SNPs.
    The input file should be generated by the "hardy_weinberg_report()" function specified below.
    :param threshold: p-value threshold from HWE test for removings SNPs above this threshold
    :param file: file containing the HWE test results for all SNPs
    :return: matplotlib fig object
    :rtype object
    >>> plot_hwe_hist()
    fig'''
    # default threshold used in tutorial
    hardy = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    zoomhwe = hardy[hardy['P'] < threshold]

    fig, ax = plt.subplots(1, 2, figsize=(16,6))
    plt.title("HWE Test")
    hardy.hist(column='P', ax=ax[0])
    ax[0].axvline(threshold, c='red', ls='--')
    ax[0].set_xlabel("HWE Exact Test P-Value")
    ax[0].set_ylabel("Number of SNPs")
    ax[0].set_title("HWE P-Value Distribution of All SNPs\n (< 1e-6 are removed)")
    zoomhwe.hist(column='P', ax=ax[1])
    ax[1].set_xlabel("HWE Exact Test P-Value")
    ax[1].set_ylabel("Number of SNPs")
    ax[1].set_title("HWE P-Value Distribution of SNPs < {}".format(threshold))
    ax[1].axvline(threshold, c='red', ls='--')
    #plt.show()

    print("number of strongly deviating SNPs: {} (threshold: {})".format(zoomhwe.shape[0], threshold))
    return fig

def plot_relatedness_scatter(infile):
    '''Plot scatter plot of crytpic relatedness.
    Input file should be generated by "relatedness_check_report()" function specified below.
    :param infile: file containing relatedness check results for all samples
    :return: matplotlib fig object
    :rtype object
    >>> plot_relatedness_scatter(pihat_min0.2.genome)
    fig'''
    from matplotlib.ticker import FormatStrFormatter

    relat = pd.read_csv(infile, delimiter=" ", skipinitialspace=True)
    print("number of founders: {}".format(relat.shape[0]))
    po_z_list = relat.loc[relat['RT'] == "PO"][['Z0', 'Z1']]
    un_z_list = relat.loc[relat['RT'] == "UN"][['Z0', 'Z1']]

    fig = plt.figure(figsize=(8,6))
    if po_z_list.empty and un_z_list.empty:
        print("no lists")
        return None
    elif po_z_list.empty:
        #un_z_list.plot(x='Z0', y='Z1', kind='scatter', xlim=[-0.05,1], ylim=[0,1.05], s=100)
        plt.scatter(x=un_z_list['Z0'], y=un_z_list['Z1'], s=100)
    elif un_z_list.empty:
        #po_z_list.plot(x='Z0', y='Z1', kind='scatter', xlim=[-0.05,1], ylim=[0,1.05], s=100)
        plt.scatter(x=po_z_list['Z0'], y=po_z_list['Z1'], s=100)
    else:
        print("list exists")
        # ax1 = po_z_list.plot(x='Z0', y='Z1', kind='scatter', xlim=[-0.05,1], ylim=[0,1.05], s=100)
        # un_z_list.plot(x='Z0', y='Z1', kind='scatter', s=100, c='green', facecolors='none', ax=ax1)
        plt.scatter(x=un_z_list['Z0'], y=un_z_list['Z1'], s=100)
        plt.scatter(x=po_z_list['Z0'], y=po_z_list['Z1'], s=100)
    plt.legend(['PO', 'UN'])
    plt.title("Z0 vs Z1 Values for Related (PO) and Unrelated (UN) Individuals")
    return fig

def calculate_missingness(df, column, threshold):
    '''Identify SNPs with a missingness rate below a certain threshold.
    :param df: dataframe containing all SNPs and their missingness rate
    :param column: column that contains missingness rate values within df
    :param threshold: threshold for removing SNPs above missingness rate
    :return: Pandas DataFrame object
    :rtype object
    >>> calculate_missingess(missigness_df, 'F_MISS', 0.05)
    missing'''
    missing = df.loc[df[column] < threshold]
    print("total removed: ", df.shape[0] - missing.shape[0])
    return missing

def get_sample_ids(df, column, filtered):
    '''Return sample IDs from one dataframe (df) that are present in another dataframe (filtered).
    :param df: dataframe that contains the samples to be filtered
    :param column: column that contains the sample IDs
    :param filtered: dataframe that contains the filtered samples
    :return: Pandas DataFrame object
    :rtype object
    >>> get_sample_ids(original_df, 'iid', fitlered_df)
    ids'''
    ids = df[~df[column].isin(filtered[column].tolist())][column]
    return ids

def make_autopct(values):
    def my_autopct(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '{p:.2f}%  ({v:d})'.format(p=pct,v=val)
    return my_autopct

def write_fail_file(ids_failed, filename="failed_ids"):
    '''Write either failed sample IDs or SNPs to two files.
    One is a human-readable csv file, the other is a csv file intended to be read into a Pandas DataFrame.
    :param ids_failed: dictionary that contains the QC checks and the corresponding failed ids.
    :param filename: name of the file to be written to
    >>> write_fail_file(ids_failed, failed_ids)
    '''
    hr = filename + "_hr.csv"
    pr = filename + "_pr.csv"
    with open(hr, "w") as f:
        for k,v in ids_failed.items():
            f.write(str(k) + ": " + str(v) + "\n")
    pd.DataFrame.from_dict(data=ids_failed, orient='index').to_csv(pr, header=True)


def sample_failed_report(write=True, imiss_file="plink.imiss", lmiss_file="plink.lmiss", sexcheck_file="plink.sexcheck",
                         het_failed_file="het_fail_ind.txt", ibd_file="pihat_min0.2_in_founders.genome"):
     '''Generate report for samples that failed QC.
     :param write: boolean that determines whether to write the sample IDs to a text file.
     :param imiss_file: plink-generated report of missing genotypes for all samples.
     :param lmiss_file: plink-generated report of missing genotypes for all SNPs.
     :param sexcheck_file: plink-generated report of sex checks for all samples.
     :param het_failed_file: text file containing individuals that failed heterozygosity checks.
     :param ibd_file: plink-generated report of identity by descent.
     :return: Figure object
     :rtype object
     >>> sample_failed_report()
     '''
    ids = {}
    ids_list = []

    # SNP missingness
    imiss = pd.read_csv(imiss_file,  delimiter=" ", skipinitialspace=True)
    lmiss = pd.read_csv(lmiss_file,  delimiter=" ", skipinitialspace=True)
    ind_missing_filtered = calculate_missingness(imiss, 'F_MISS', 0.2)
    missing_ids = get_sample_ids(imiss, 'IID', ind_missing_filtered)

    ids['missing'] = missing_ids.tolist()
    ids_list.append(missing_ids.tolist())

    # mismatched sex
    sex = pd.read_csv("plink.sexcheck", delimiter=" ", skipinitialspace=True)
    sex_mismatches = sex.loc[sex['STATUS'] == "PROBLEM"]
    sex_mismatches_counts = sex['STATUS'].value_counts()
    print("total sex mismatches: ", sex_mismatches.shape[0])
    sex_mismatches_ids = sex_mismatches['IID'].tolist()

    ids['sex_mismatches'] = sex_mismatches_ids
    ids_list.append(sex_mismatches_ids)

    # labels=['Matches', 'Mismatches']
    # plt.title("Sex mismatches")
    # plt.pie(sex_mismatches_counts, autopct=make_autopct(sex_mismatches_counts))
    # plt.legend(labels, loc="right", bbox_to_anchor=(1, 0, 0.5, 1))
    # plt.show()

    # outlying heterozygosity
    het_failed = pd.read_csv("het_fail_ind.txt", delimiter=" ")
    het_failed_ids = het_failed['IID'].tolist()
    print("total het failed mismatches: ", len(het_failed_ids))

    ids['het_failed'] = het_failed_ids
    ids_list.append(het_failed_ids)

    # high IBD - pi_hat threshold
    ibd = pd.read_csv("pihat_min0.2_in_founders.genome", delimiter=" ", skipinitialspace=True)
    print("total ibd failures: ", ibd.shape[0])
    ibd_ids = ibd['IID1'].tolist()

    ids['relatedness_failed'] = ibd_ids
    ids_list.append(ibd_ids)

    # graph everything
    tests = ['SNP Missingness', 'Sex Mismatches', 'Outlying Heterozygosity', 'Cryptic Relatedness']
    fail_counts = [len(missing_ids), len(sex_mismatches_ids), len(het_failed_ids), len(ibd_ids)]
    total_fails = set(x for l in ids_list for x in l)
    print("total samples failed: {}/{}".format(len(total_fails), imiss.shape[0]))

    fig = plt.figure(figsize=(8,6))
    plt.tight_layout()
    plt.bar(x=tests, height=fail_counts)
    plt.title("Samples failing QC checks (total: {}/{})".format(len(total_fails), imiss.shape[0]))
    plt.xlabel("QC Test")
    plt.ylabel("Number of samples")
    plt.tick_params(axis='x', rotation=90)

    if write:
        write_fail_file(ids, "failed_sample_ids")

    return fig

## Overall analysis for failed SNPs

# Missing SNPs (> 2%)

def snps_failed_report(write=False, miss_threshold=0.2, maf_threshold=0.00001, hwe_threshold=1e-6,lmiss_file="plink.lmiss", maf_file="MAF_check.frq", hwe_file="plink.hwe"):
     '''Generate report for SNPs that failed QC.
     :param write: boolean that determines whether to write the SNP IDs to a text file.
     :param miss_threshold: F_MISS threshold to identify missing SNPs (based on plink-generated imiss file).
     :param maf_threshold: MAF threshold to identify SNPs failing MAF check.
     :param lmiss_file: plink-generated report of missing genotypes for all SNPs.
     :param maf_file: plink-generated report of MAFs for all SNPs.
     :param hwe_file: plink-generated report of SNP heterozygosity rates and HWE test results.
     :return: Figure object
     :rtype object
     >>> snps_failed_report()
     '''
    snps = {}
    ids_list = []
    lmiss = pd.read_csv(lmiss_file, delimiter=" ", skipinitialspace=True)

    missing_snps = lmiss.loc[lmiss['F_MISS'] > miss_threshold]
    snps['missing_snps'] = missing_snps['SNP'].tolist()
    ids_list.append(missing_snps['SNP'].tolist())
    print("total missing snps failed: ", len(missing_snps['SNP'].tolist()))

    # MAF
    maf = pd.read_csv(maf_file, delimiter=" ", skipinitialspace=True)
    rare = maf.loc[maf['MAF'] < maf_threshold]
    snps['maf'] = rare['SNP'].tolist()
    ids_list.append(rare['SNP'].tolist())
    print("total maf snps failed: ", len(rare['SNP'].tolist()))

    # HWE departures
    hardy = pd.read_csv(hwe_file, delimiter=" ", skipinitialspace=True)
    hwe_failed = hardy.loc[hardy['P'] < hwe_threshold]
    snps['hwe'] = hwe_failed['SNP'].tolist()
    ids_list.append(hwe_failed['SNP'].tolist())
    print("total hwe snps failed: ", len(hwe_failed['SNP'].tolist()))

    # graph everything
    tests = ['SNP Missingness', 'Minor Allele Frequency', 'Outlying HWE']
    fail_counts = [len(missing_snps['SNP'].tolist()), len(rare['SNP'].tolist()), len(hwe_failed['SNP'].tolist())]
    total_fails = set(x for l in ids_list for x in l)
    print("total fails: ", len(total_fails))

    fig = plt.figure(figsize=(8,6))
    plt.tight_layout()
    plt.bar(x=tests, height=fail_counts)
    plt.title("SNPs failing QC checks (total: {}/{})".format(len(total_fails), lmiss.shape[0]))
    plt.xlabel("QC Test")
    plt.ylabel("Number of SNPs")
    plt.tick_params(axis='x', rotation=90)

    if write:
        write_fail_file(snps, "failed_snps_ids")

    return fig

def save_pdf(infile, plots):
    ''' Write a list of matplotlib Figure objects to a pdf file in the current working directory.
    :param infile: prefix of the plink input files
    :param plots: list of Figure objects to written to pdf file
    >>> save_pdf("HapMap_3_r3_1", figures)
    "HapMap_3_r3_1_qc_report.pdf"'''

    title = infile + "_qc_report.pdf"

    with PdfPages(title) as pdf:
        for plot in plots:
            pdf.savefig(plot)

# analysis functions
def missingness_report(bfile, outfile):
    command = "plink --bfile {} --missing --silent --out {}".format(bfile, outfile)
    os.system(command)

def check_sex(bfile):
    command = "plink --bfile {} --check-sex --silent".format(bfile)
    os.system(command)

def check_sex_report(file="plink.sexcheck"):
    sexcheck = pd.read_csv(file, delimiter=" ", skipinitialspace=True)
    problems = sexcheck.loc[sexcheck['STATUS'] == "PROBLEM"]
    print("number of problems: ", problems.shape[0], "\ndetails: \n", problems)
    problems[['FID', 'IID']].to_csv("sex_discrepancy.txt", index=None, sep=' ')

def relatedness_report(bfile, indep_snp_file, threshold=0.2):
    command = "plink --bfile {} --extract {} --genome --min {} --silent --out pihat_min_{}".format(bfile, indep_snp_file, threshold, threshold)
    os.system(command)

def maf_check_report(bfile):
    command = "plink --bfile {} --freq --silent --out MAF_check".format(bfile)
    os.system(command)

def heterozygosity_report(bfile, outfile):
    #bfile should be ld_check based on output of ld_pruning_filter function
    #this is because the heterozygosity rates should be calculated from uncorrelated regions of the genome, so we exclude retions of high LD
    command = "plink --bfile {}  --het --silent --out {}".format(bfile, outfile)
    os.system(command)

def hardy_weinberg_report(bfile):
    command = "plink --bfile {} --hardy".format(bfile)
    os.system(command)

def relatedness_check_report(bfile, indep_snp_file, outfile, threshold=0.2):
    print("relatedness check report using pi_hat threshold: {}".format(threshold))
    command = "plink --bfile {} --extract {} --silent --genome --min {} --out {}".format(bfile, indep_snp_file, threshold, outfile)
    os.system(command)

# filter functions
def snp_genotype_filter(bfile, cutoff):
    outfile = bfile + "_snp_filtered"
    command = "plink --bfile {} --geno {} --silent --make-bed --out {}".format(bfile, cutoff, outfile)
    os.system(command)
    return outfile

def ind_genotype_filter(bfile, cutoff):
    outfile = bfile + "_ind_filtered"
    command = "plink --bfile {} --mind {} --silent --make-bed --out {}".format(bfile, cutoff, outfile)
    os.system(command)
    return outfile

def impute_sex(bfile):
    outfile = bfile + "_sex_imputed"
    command = "plink --bfile {} --impute-sex --silent --make-bed --out {}".format(bfile, outfile)
    os.system(command)

def remove_sex(bfile, remove_file):
    outfile = bfile + "_sex_removed"
    if os.path.isfile(remove_file):
        command = "plink --bfile {} --remove {} --make-bed --out {}".format(bfile, remove_file, outfile)
        os.system(command)
    else:
        print("error in remove_sex function! {} file is not found!").format(remove_file)
    return outfile

def get_autosomal_snps(bim_file):
    bim = pd.read_csv(bim_file, delimiter="\t", skipinitialspace=True)
    bim.columns = ['chrom', 'snp', 'cm', 'pos', 'a0', 'a1']
    bim['chrom'] = bim['chrom'].astype('int32')
    bim_filtered = bim.loc[(bim['chrom'] >= 1) & (bim['chrom'] <= 22)]
    bim_filtered['snp'].to_csv("snp_1_22.txt", index=None, sep=' ')

def select_autosomal_snp(bfile, extract_file="snp_1_22.txt"):
    outfile = bfile + "_autosomal"
    command = "plink --bfile {} --extract {} --silent --make-bed --out {}".format(bfile, extract_file, outfile)
    os.system(command)
    return outfile

def maf_filter(bfile, threshold=0.05):
    print("maf filter using threshold: {}".format(threshold))
    outfile = bfile + "_maf_filtered_thresh_{}".format(threshold)
    command = "plink --bfile {} --maf {} --make-bed --out {}".format(bfile, threshold, outfile)
    os.system(command)
    return outfile

def hardy_weinberg_filter(bfile, out, control=True, threshold=1e-6):
    outfile = bfile + out
    print("hardy-weinberg filter using threshold: {}".format(threshold))
    if control:
        command = "plink --bfile {} --hwe {} --silent --make-bed --out {}".format(bfile, threshold, outfile)
    else:
        command = "plink --bfile {} --hwe include-nonctrl {} --silent --make-bed --out {}".format(bfile, threshold, outfile)
    os.system(command)
    return outfile
    #os.system(command2)

def ld_pruning_filter(bfile, snp_file, out_file, window=50, shift=5, correlation_threshold=0.2, correlation_method="pairwise"):
    if correlation_method=="multiple":
        # add check for correlation threshold if "multiple" is chosen - must be > 1
        command = "plink --bfile {} --indep {} {} {} --out {}".format(bfile, window, shift, correlation_threshold, snp_file)
    elif correlation_method=="pairwise":
        command = "plink --bfile {} --indep-pairwise {} {} {} --out {}".format(bfile, window, shift, correlation_threshold, snp_file)
    snp_in = snp_file + ".prune.in"
    command2 = "plink --bfile {} --extract {} --het --out {}".format(bfile, snp_in, out_file)
    os.system(command)
    os.system(command2)

def get_heterozygosity_ind(infile, out_file):
    #infile should be the het_check.het file from the heterozygosity_report function
    het_check = pd.read_csv(infile, delimiter=" ", skipinitialspace=True)
    het_check['het_rate'] = (het_check['N(NM)'] - het_check['O(HOM)']) / het_check['N(NM)']
    het_fail = het_check.loc[(het_check['het_rate'] < het_check['het_rate'].mean() - 3 * het_check['het_rate'].std()) |
                        (het_check['het_rate'] > het_check['het_rate'].mean() + 3 * het_check['het_rate'].std())]
    print("original number of snps: {}".format(het_check.shape[0]))
    print("failed number of snps: {}".format(het_fail.shape[0]))

    het_fail.iloc[:, :2].to_csv(out_file, index=None, sep=' ')

def heterozygosity_filter(bfile, failed_file):
    outfile = bfile + "_het_fail_removed"
    command = "plink --bfile {} --remove {} --make-bed --out {}".format(bfile, failed_file, outfile)
    os.system(command)
    return outfile

def relatedness_filter(bfile, remove_file):
    outfile = bfile + "_relatedness_fail_removed"
    command = "plink --bfile {} --remove {} --make-bed --out {}".format(bfile, remove_file, outfile)
    os.system(command)
    return outfile

def founders_filter(bfile):
    outfile = bfile + "_exclude_nonfounders"
    command = "plink --bfile {} --filter-founders --silent --make-bed --out {}".format(bfile, outfile)
    os.system(command)
    return outfile

def get_relatives_low_call_rate(imissfile, relatfile, outfile):
    imiss = pd.read_csv(imissfile, delimiter=" ", skipinitialspace=True)
    relat = pd.read_csv(relatfile, delimiter=" ", skipinitialspace=True)
    fid_first_list = relat['IID1'].tolist()
    fid_second_list = relat['IID2'].tolist()
    first_selected = imiss[imiss['IID'].isin(fid_first_list)].reset_index(drop=True)
    second_selected = imiss[imiss['IID'].isin(fid_second_list)].reset_index(drop=True)
    selected = np.where(first_selected['F_MISS'] > second_selected['F_MISS'],first_selected[['FID', 'IID']],
                    second_selected[['FID', 'IID']])
    np.savetxt(outfile, selected, delimiter=' ',  fmt='%d %s')

def qc_samples(bfile):
    figures = []

    print("Running QC only on samples")
    print("step 1: check snp missingness")
    miss_out = "plink"
    missingness_report(bfile, miss_out)
    missing_figs = plot_missingness_hist()
    figures.append(missing_figs)

    print("step 1a: filter missing individuals under threshold 0.2")
    ind_geno_out = ind_genotype_filter(bfile, 0.2)

    # print("step 1b: filter missing individuals under threshold 0.02")
    # ind_geno_out_2 = ind_genotype_filter(ind_geno_out, 0.02)

    print("step 2: check for sex discrepancy")
    check_sex(ind_geno_out)
    check_sex_report()
    check_sex_figs = plot_sexcheck_hist()
    figures.append(check_sex_figs)

    print("step 2a: filter individuals with sex discrepancy")
    remove_sex_file = remove_sex(ind_geno_out, remove_file="sex_discrepancy.txt")

    print("step 3: check heterozygosity rates and filter individuals with deviating rates")
    print("step 3a: get list of non-(highly) correlated snps")
    ld_out = "ld_check"
    snp_file = "indepSNP" #list of independent snps generated by ld_pruning_filter function
    ld_pruning_filter(remove_sex_file, snp_file, ld_out)

    print("step 3b: get list of strongly deviating individuals")
    ld_in = ld_out + ".het"
    het_fail_file = "het_fail_ind.txt"
    get_heterozygosity_ind(ld_in, het_fail_file)

    print("step 3c: filter individuals with strongly deviating heterozygosity rates")
    hetero_filtered = heterozygosity_filter(remove_sex_file, het_fail_file)

    print("step 4: check individuals for cryptic relatedness")
    snp_file_in = snp_file + ".prune.in"
    relatedness_out = "pihat_min0.2"
    relatedness_check_report(hetero_filtered, snp_file_in, relatedness_out, threshold=0.2)
    relatedness_out_name = relatedness_out + ".genome"
    relat_figs = plot_relatedness_scatter(relatedness_out_name)
    figures.append(relat_figs)

    print("step 4a: filter founder individuals")
    founder_filtered = founders_filter(hetero_filtered)

    print("step 4b: repeat check for cryptic relatedness in founder individuals")
    relat_filtered_out = "pihat_min0.2_in_founders"
    relatedness_check_report(founder_filtered, snp_file_in, relat_filtered_out, threshold=0.2)
    relat_filtered_out_name = relat_filtered_out + ".genome"
    relat_filt_figs = plot_relatedness_scatter(relat_filtered_out_name)

    if relat_filt_figs is not None:
        figures.append(relat_filt_figs)

        print("step 4c: for individuals breaching the pi_hat threshold, remove individual with lowest call rate")
        found_miss = "founders"
        missingness_report(founder_filtered, found_miss)
        low_call_out = "related_low_call_rate.txt"
        found_imiss = found_miss + ".imiss"
        related_filtered_file = relat_filtered_out + ".genome"
        get_relatives_low_call_rate(found_imiss,related_filtered_file, low_call_out)
        related_filtered = relatedness_filter(founder_filtered, low_call_out)

    print("Generating samples failed report")
    samples_failed_fig = sample_failed_report()
    figures.append(samples_failed_fig)

    report = bfile + "_samples_only"
    save_pdf(report, figures)

def qc_snps(bfile):
    figures = []

    print("Running QC only on SNPs")
    print("step 1: check snp missingness")
    miss_out = "plink"
    missingness_report(bfile, miss_out)
    missing_figs = plot_missingness_hist()
    figures.append(missing_figs)

    print("step 1a: filter missing snps under threshold 0.2")
    snp_geno_out = snp_genotype_filter(bfile, 0.2)

    print("step 2: select autosomal SNPs and filter for low MAF")
    bim_file = snp_geno_out + ".bim"

    print("step 2a: generate file with autosomal snps")
    get_autosomal_snps(bim_file)

    print("step 2b: filter for autosomal snps")
    auto_file = select_autosomal_snp(snp_geno_out)

    print("step 2c: check MAF distributions")
    maf_check_report(auto_file)
    maf_check_figs = plot_maf_hist()
    #figures.append(maf_check_figs)

    print("step 2d: filter snps with low MAF (default threshold: 0.05)")
    maf_filtered = maf_filter(auto_file, threshold=0.05)
    maf_drop_figs = plot_maf_dropped_hist()
    figures.append(maf_drop_figs)

    print("step 3: check hardy-weinberg equilibrium")
    hardy_weinberg_report(maf_filtered)
    hwe_figs = plot_hwe_hist()
    figures.append(hwe_figs)

    print("step 3a: filter controls with stringent hwe threshold")
    out = "_control_threshold"
    hwe_control = hardy_weinberg_filter(maf_filtered, out, threshold=1e-6)

    print("step 3b: filter cases with less stringest hwe threshold")
    out2 = "_case_threshold"
    hwe_cases = hardy_weinberg_filter(hwe_control, out2, control=False, threshold=1e-10)

    snps_failed_fig = snps_failed_report()
    figures.append(snps_failed_fig)
    report = bfile + "_snps_only"
    save_pdf(bfile, figures)

def qc_sample_snps(bfile):
    figures = []

    print("Running full QC on samples and SNPs")
    print("step 1: check snp missingness")
    miss_out = "plink"
    missingness_report(bfile, miss_out)
    missing_figs = plot_missingness_hist()
    figures.append(missing_figs)

    print("step 1a: filter missing snps under threshold 0.2")
    # remove SNPs with a missingness rate of greater than 2%
    snp_geno_out = snp_genotype_filter(bfile, 0.2)

    print("step 1b: filter missing individuals under threshold 0.2")
    # remove individuals with a percentage of missing SNPs greater than 2%
    ind_geno_out = ind_genotype_filter(snp_geno_out, 0.2)

    # print("step 1c: filter missing snps under threshold 0.02")
    # snp_geno_out_2 = snp_genotype_filter(ind_geno_out, 0.02)
    #
    # print("step 1d: filter missing individuals under threshold 0.02")
    # ind_geno_out_2 = ind_genotype_filter(snp_geno_out_2, 0.02)

    print("step 2: check for sex discrepancy")
    check_sex(ind_geno_out)
    check_sex_report()
    check_sex_figs = plot_sexcheck_hist()
    figures.append(check_sex_figs)

    print("step 2a: filter individuals with sex discrepancy")
    # remove individuals with discrepancy between reported gender and the genetic gender
    remove_sex_file = remove_sex(ind_geno_out, remove_file="sex_discrepancy.txt")

    print("step 3: select autosomal SNPs and filter for low MAF")
    bim_file = remove_sex_file + ".bim"

    print("step 3a: generate file with autosomal snps")
    get_autosomal_snps(bim_file)

    print("step 3b: filter for autosomal snps")
    auto_file = select_autosomal_snp(remove_sex_file)

    print("step 3c: check MAF distributions")
    maf_check_report(auto_file)
    maf_check_figs = plot_maf_hist()
    #figures.append(maf_check_figs)

    print("step 3d: filter snps with low MAF")
    # remove SNPs with a minor allele frequency less than 0.05 (i.e less than 5% of individuals have the minor allele for the SNP)
    maf_filtered = maf_filter(auto_file, threshold=0.05)
    maf_drop_figs = plot_maf_dropped_hist()
    figures.append(maf_drop_figs)

    print("step 4: check hardy-weinberg equilibrium")
    # remove SNPs with allele frequencies that deviate from their expected frequencies as determined by HWE
    hardy_weinberg_report(maf_filtered)
    hwe_figs = plot_hwe_hist()
    figures.append(hwe_figs)

    print("step 4a: filter controls with stringent hwe threshold")
    out = "_control_threshold"
    hwe_control = hardy_weinberg_filter(maf_filtered, out, threshold=1e-6)

    print("step 4b: filter cases with less stringest hwe threshold")
    out2 = "_case_threshold"
    hwe_cases = hardy_weinberg_filter(hwe_control, out2, control=False, threshold=1e-10)

    print("step 5: check heterozygosity rates and filter individuals with deviating rates")
    print("step 5a: get list of non-(highly) correlated snps")
    ld_out = "ld_check"
    snp_file = "indepSNP"
    ld_pruning_filter(hwe_cases, snp_file, ld_out)

    print("step 5b: get list of strongly deviating individuals")
    ld_in = ld_out + ".het"
    get_heterozygosity_ind(ld_in, "het_fail_ind.txt")

    print("step 5c: filter individuals with strongly deviating heterozygosity rates")
    # remove SNPs with large heterozygosity rates, deviating from the expected rates under HWE
    hetero_filtered = heterozygosity_filter(hwe_cases, "het_fail_ind.txt")

    print("step 6: check individuals for cryptic relatedness")
    snp_file_in = snp_file + ".prune.in"
    relatedness_out = "pihat_min0.2"
    relatedness_check_report(hetero_filtered, snp_file_in, relatedness_out, threshold=0.2)
    relatedness_out_name = relatedness_out + ".genome"
    relat_figs = plot_relatedness_scatter(relatedness_out_name)
    figures.append(relat_figs)

    print("step 6a: filter founder individuals")
    founder_filtered = founders_filter(hetero_filtered)

    print("step 6b: repeat check for cryptic relatedness in founder individuals")
    relat_filtered_out = "pihat_min0.2_in_founders"
    relatedness_check_report(founder_filtered, snp_file_in, relat_filtered_out, threshold=0.2)
    relat_filtered_out_name = relat_filtered_out + ".genome"
    relat_filt_figs = plot_relatedness_scatter(relat_filtered_out_name)
    if relat_filt_figs is not None:
        figures.append(relat_filt_figs)

        print("step 6c: for individuals breaching the pi_hat threshold, remove individual with lowest call rate")
        found_miss = "founders"
        missingness_report(founder_filtered, found_miss)
        low_call_out = "related_low_call_rate.txt"
        found_imiss = found_miss + ".imiss"
        related_filtered_file = relat_filtered_out + ".genome"
        get_relatives_low_call_rate(found_imiss,related_filtered_file, low_call_out)
        related_filtered = relatedness_filter(founder_filtered, low_call_out)

    print("Generating samples failed report")
    samples_failed_fig = sample_failed_report()
    figures.append(samples_failed_fig)

    print("Generating snps failed report")
    snps_failed_fig = snps_failed_report()
    figures.append(snps_failed_fig)

    report = bfile + "_snps_samples"
    save_pdf(report, figures)


def main(bfile, full=True, sample=False, snp=False):
    if full:
        qc_sample_snps(bfile)
    elif sample:
        qc_samples(bfile)
    elif snp:
        qc_snps(bfile)


if __name__=="__main__":
    '''This script implements the main QC steps outlined in the first part of "https://github.com/MareesAT/GWA_tutorial/"'''
    ## Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("bfile", help="provide the prefix name for the .bed, .fam files (e.g HapMap_3_r3_1(.bed, .bim, .fam))")
    parser.add_argument("-full", help="run full QC analysis on samples and SNPs", action="store_true", default=False)
    parser.add_argument("-only_samples", help="option to only run QC on the samples (individuals)", action="store_true", default=False)
    parser.add_argument("-only_snps", help="option to only run QC on the SNPs", action="store_true", default=False)

    args = parser.parse_args()
    bfile = args.bfile
    full_var = args.full
    sample_var = args.only_samples
    snp_var = args.only_snps

    print("Running program with arguments: bfile: {}, full: {}, only samples: {}, only snps: {}".format(bfile, full_var, sample_var, snp_var))
    main(bfile, full=full_var, sample=sample_var, snp=snp_var)
