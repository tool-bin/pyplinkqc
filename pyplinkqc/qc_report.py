import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams.update({'figure.autolayout': True})
from matplotlib.backends.backend_pdf import PdfPages
from .qc_filter import run_plink

# analysis functions
def calculate_missingness(df: pd.DataFrame, column: str, threshold: float):
    """Filter pandas dataframe column by missingness threshold.

    Key arguments:
    --------------
    df: pd.DataFrame
        dataframe to filter
    column: str
        column to filter
    threshold: float
        maf threshold to use for filtering SNPs

    Returns:
    --------
    missing: pd.DataFrame
        filtered pandas dataframe
    """
    missing = df.loc[df[column] < threshold]
    return missing

def get_sample_ids(df: pd.DataFrame, column: str, filtered: pd.DataFrame):
    """Get sample IDs from input pandas dataframe and column.

    Key arguments:
    --------------
    df: pd.DataFrame
        dataframe containing sample IDs
    column: str
        column referring to sample IDs
    filtered: pd.DataFrame
        dataframe containing sample IDs to remove from df

    Returns:
    --------
    ids: pd.DataFrame
        filtered pandas dataframe
    """
    ids = df[~df[column].isin(filtered[column].tolist())][column]
    return ids

def heterozygosity_individuals(infile: str, outfile: str):
    """Filter individuals based on heterozygosity rates.

    Key arguments:
    --------------
    infile: str
        path to het_check.het file generated by heterozygosity function
    outfile: str
        file to write output to

    Returns:
    --------
    het_check: pd.DataFrame
        filtered pandas dataframe
    """
    #infile should be the het_check.het file from the heterozygosity_report function
    het_check = pd.read_csv(infile, delimiter=" ", skipinitialspace=True)
    het_check['het_rate'] = (het_check['N(NM)'] - het_check['O(HOM)']) / het_check['N(NM)']
    het_check['low_limit'] = het_check['het_rate'].mean() - (3 * het_check['het_rate'].std())
    het_check['up_limit'] = het_check['het_rate'].mean() + (3 * het_check['het_rate'].std())
    het_check['outlier'] = np.where((het_check['het_rate'] > het_check['up_limit']) |  (het_check['het_rate'] < het_check['low_limit']),1, 0)
    het_fail = het_check.loc[het_check['outlier'] == 1]
    het_fail.iloc[:, :2].to_csv(outfile, index=None, sep=' ')
    return het_check

def missingness(bfile: str, outfile: str):
    """Generate missingness report.

    Key arguments:
    --------------
    df: pd.DataFrame
        dataframe to filter
    column: str
        column to filter
    threshold: float
        maf threshold to use for filtering SNPs

    Returns:
    --------
    """
    # command = "./plink --bfile {} --missing --silent --out {}".format(bfile, outfile)
    # os.system(command)
    run_plink(bfile, '--missing', f'--out {outfile}')

def run_check_sex(bfile: str):
    """Run sex check command.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bed, .bim, .fam)

    Returns:
    --------
    """
    run_plink(bfile, '--check-sex')

def check_sex(sexcheck_file: str="plink.sexcheck"):
    """Generate sex check report.

    Key arguments:
    --------------
    sexcheck_file: str
        file generated by run_check_sex function

    Returns:
    --------
    problems: pd.DataFrame
        contains individuals with sex discrepancies
    """
    sexcheck = pd.read_csv(sexcheck_file, delimiter=" ", skipinitialspace=True)
    problems = sexcheck.loc[sexcheck['STATUS'] == "PROBLEM"]
    problems[['FID', 'IID']].to_csv("sex_discrepancy.txt", index=None, sep=' ')
    return problems

def relatedness(bfile: str, indep_snp_file:str, threshold: float=0.2):
    """Generate individuals relatedness report.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bim, .bed, .fam)
    indep_snp_file: str
        file containing independent SNPs (based on LD calculations)
    threshold: float
        relatedness threshold to use for filtering samples

    Returns:
    --------
    """
    # command = "./plink --bfile {} --extract {} --genome --min {} --silent --memory --out pihat_min_{}".format(bfile, indep_snp_file, threshold, threshold)
    # os.system(command)
    run_plink(bfile, f'--extract {indep_snp_file}', f'--min {threshold}', '--memory', f'--out pihat_min_{threshold}')

def maf_check(bfile: str, outfile: str):
    """Generate minor allele frequency check.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bim, .bed, .fam)
    outfile: str
        name of output file

    Returns:
    --------
    """
    # command = "./plink --bfile {} --freq --silent --out MAF_check".format(bfile)
    run_plink(bfile, f'--freq', f'--out {outfile}')

def heterozygosity(bfile: str, outfile: str):
    """Generate heterozygosity report.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bim, .bed, .fam)
    outfile: str
        name of output file

    Returns:
    --------
    """
    #bfile should be ld_check based on output of ld_pruning_filter function
    #this is because the heterozygosity rates should be calculated from uncorrelated regions of the genome, so we exclude retions of high LD
    # command = "./plink --bfile {}  --het --silent --out {}".format(bfile, outfile)
    # os.system(command)
    run_plink(bfile, f'--het', f'--out {outfile}')

def hardy_weinberg(bfile: str):
    """Generate hardy weinberg report.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bim, .bed, .fam)

    Returns:
    --------
    """
    # command = "./plink --bfile {} --hardy".format(bfile)
    # os.system(command)
    run_plink(bfile, f'--hardy')

def relatedness_check(bfile: str, indep_snp_file: str, outfile: str, threshold: float=0.2):
    """Check sample relatedness.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bim, .bed, .fam)
    indep_snp_file: str
        file containing independent SNPs from uncorrelated regions of the genome
    outfile: str
        name of output file
    threshold: float
        threshold for relatnedness check

    Returns:
    --------
    """
    # command = "./plink --bfile {} --extract {} --silent --genome --min {} --out {}".format(bfile, indep_snp_file, threshold, outfile)
    # os.system(command)
    run_plink(bfile, f'--extract {indep_snp_file}', f'--genome', f'--min {threshold},
    f'--out {outfile}')

def relatives_low_call_rate(imissfile: str, relatfile: str, outfile: str):
    """Identify related samples with low genotyping call rates.

    Key arguments:
    --------------
    imissfile: str
        prefix for plink generated missingness file
    relatfile: str
        file containing related individuals
    outfile: str
        name of output file

    Returns:
    --------
    """
    imissfile = imissfile + ".imiss"
    imiss = pd.read_csv(imissfile, delimiter=" ", skipinitialspace=True)
    relat = pd.read_csv(relatfile, delimiter=" ", skipinitialspace=True)
    fid_first_list = relat['IID1'].tolist()
    fid_second_list = relat['IID2'].tolist()
    relat_miss1 = relat.set_index('IID1').join(imiss.set_index('IID')[['F_MISS']])
    relat_miss2 = relat_miss1.rename_axis('IID1').reset_index().set_index('IID2').join(imiss.set_index('IID')[['F_MISS']], rsuffix="_2").rename_axis('IID2').reset_index()
    ids = np.where(relat_miss2['F_MISS']>relat_miss2['F_MISS_2'], relat_miss2['IID1'], relat_miss2['IID2'])
    # first_selected = imiss[imiss['IID'].isin(fid_first_list)].reset_index(drop=True)
    # second_selected = imiss[imiss['IID'].isin(fid_second_list)].reset_index(drop=True)
    # selected = np.where(first_selected['F_MISS'] > second_selected['F_MISS'],first_selected[['FID', 'IID']],
    #                 second_selected[['FID', 'IID']])
    selected = imiss.loc[imiss['IID'].isin(ids)][['FID', 'IID']]
    np.savetxt(outfile, selected, delimiter=' ',  fmt='%d %s')
    return selected

def write_fail_file(ids_failed: dict, outfile: str="failed_ids"):
    """Write either failed sample IDs or SNPs to two files.

    One is a human-readable csv file, the other is a csv file intended to be read into a Pandas DataFrame.

    Key arguments:
    --------------
    ids_failed: dict
        dictionary containing IDs of samples that failed QC
    outfile: str
        name of output file

    Returns:
    --------
    """
    hr = filename + "_hr.csv"
    pr = filename + "_pr.csv"
    with open(hr, "w") as f:
        for k,v in ids_failed.items():
            f.write(str(k) + ": " + str(v) + "\n")
    pd.DataFrame.from_dict(data=ids_failed, orient='index').to_csv(pr, header=True)

def save_pdf(outfile: str, figs: list):
    """Write a list of matplotlib Figure objects to a pdf file in the current working directory.


    Key arguments:
    --------------
    outfile: str
        name to write PDF file to
    figs: list
        list of Figure objects to be written to PDF file

    Returns:
    --------
    """

    title = outfile + "_report.pdf"

    with PdfPages(title) as pdf:
        for plot in figs:
            pdf.savefig(plot)

def snps_failed(write: bool=False, miss_threshold: float=0.2, maf_threshold: float=0.01, hwe_threshold: float=1e-6, lmiss_file: str="plink.lmiss", maf_file: str="MAF_check.frq", hwe_file: str="plink.hwe"):
    """Write report for SNPs that failed QC.

    Key arguments:
    --------------
    write: bool
        determines whether to write out failed sample ids
    snp_missingness_threshold: float
        threshold for filtering snps with high missingness rates
    maf_threshold: float
        threshold for filtering SNPs with high MAF
    hwe_threshold: float
        threshold used for HWE test
    lmissfile: str
        file containing SNPs with high missingness rates
        (generated by check_snps_missingness function)
    maf_file: str
        file containing SNPs with outlying MAF
        (generated by check_maf function)
    hwe_file: str
        file containing SNPs with outlying HWE
        (generated by check_hwe function)

    Returns:
    --------
    """
    snps = {}
    ids_list = []

    if lmiss_file != "":
        # SNP missingness
        lmiss = pd.read_csv(lmiss_file, delimiter=" ", skipinitialspace=True)
        missing_snps = lmiss.loc[lmiss['F_MISS'] > miss_threshold]
        snps['Missing SNPs'] = missing_snps['SNP'].tolist()
        ids_list.append(missing_snps['SNP'].tolist())
        print("total missing snps failed: ", len(missing_snps['SNP'].tolist()))

    if maf_file != "":
        # Outlying MAF
        maf = pd.read_csv(maf_file, delimiter=" ", skipinitialspace=True)
        rare = maf.loc[maf['MAF'] < maf_threshold]
        snps['MAF'] = rare['SNP'].tolist()
        ids_list.append(rare['SNP'].tolist())
        print("total maf snps failed: ", len(rare['SNP'].tolist()))

    if hwe_file != "":
        # Outlying HWE
        hardy = pd.read_csv(hwe_file, delimiter=" ", skipinitialspace=True)
        hwe_failed = hardy.loc[hardy['P'] < hwe_threshold]
        snps['Outlying HWE'] = hwe_failed['SNP'].tolist()
        ids_list.append(hwe_failed['SNP'].tolist())
        print("total hwe snps failed: ", len(hwe_failed['SNP'].tolist()))

    #tests = ['SNP Missingness', 'Minor Allele Frequency', 'Outlying HWE']
    fail_counts = [len(vals) for key,vals in snps.items()]
    #total_fails = set(x for l in ids_list for x in l)
    total_fails = sum(fail_counts)
    print("total snps failed: {}/{}".format(total_fails, lmiss.shape[0]))
    # fail_counts = [len(missing_snps['SNP'].tolist()), len(rare['SNP'].tolist()), len(hwe_failed['SNP'].tolist())]
    # total_fails = set(x for l in ids_list for x in l)
    # print("total fails: ", len(total_fails))

    fig = plt.figure(figsize=(8,6))
    plt.tight_layout()
    plt.bar(x=list(snps.keys()), height=fail_counts)
    plt.title("SNPs failing QC checks (total: {}/{})".format(total_fails, lmiss.shape[0]))
    plt.xlabel("QC Test")
    plt.ylabel("Number of SNPs")
    plt.tick_params(axis='x', rotation=90)

    if write:
        write_fail_file(snps, "failed_snps_ids")

    return fig


def samples_failed(write: bool=True, miss_threshold: float=0.2, imiss_file: str="plink.imiss", lmiss_file: str="plink.lmiss", sexcheck_file: str="plink.sexcheck", het_failed_file: str="heterozygosity_failed.txt", ibd_file: str="pihat_min0.2.genome"):
    """Write report for samples that failed QC.

    Key arguments:
    --------------
    write: bool
        determines whether to write out failed sample ids
    snp_missingness_threshold: float
        threshold for filtering snps with high missingness rates
    imissfile: str
        file containing samples with high missingness rates
        (generated by check_snps_missingness function)
    lmissfile: str
        file containing snps with high missingness rates
        (generated by check_snp_missingness function)
    sexcheckfile: str
        file containing samples that have sex discrepancies
        (generated by check_sex_discrepancy function)
    ibd_threshold: float
        threshold for removing samples with high ibd
    ibdfile: str
        file containing ibc coefficients for samples
        (generated by check_cryptic_relatedness function)

    Returns:
    --------
    """
    ids = {}
    ids_list = []

    if imiss_file != "":
        # SNP missingness
        imiss = pd.read_csv(imiss_file,  delimiter=" ", skipinitialspace=True)
        lmiss = pd.read_csv(lmiss_file,  delimiter=" ", skipinitialspace=True)
        ind_missing_filtered = calculate_missingness(imiss, 'F_MISS', miss_threshold)
        missing_ids = get_sample_ids(imiss, 'IID', ind_missing_filtered)

        ids['SNP Missingness'] = missing_ids.tolist()
        ids_list.append(missing_ids.tolist())

    if sexcheck_file != "":
        # mismatched sex
        sex = pd.read_csv(sexcheck_file, delimiter=" ", skipinitialspace=True)
        sex_mismatches = sex.loc[sex['STATUS'] == "PROBLEM"]
        sex_mismatches_counts = sex['STATUS'].value_counts()
        print("total sex mismatches: ", sex_mismatches.shape[0])
        sex_mismatches_ids = sex_mismatches['IID'].tolist()

        ids['Sex Mismatches'] = sex_mismatches_ids
        ids_list.append(sex_mismatches_ids)

    if het_failed_file != "":
        # outlying heterozygosity
        het_failed = pd.read_csv(het_failed_file, delimiter=" ")
        het_failed_ids = het_failed['IID'].tolist()
        print("total het failed mismatches: ", len(het_failed_ids))

        ids['Outlying Heterozygosity'] = het_failed_ids
        ids_list.append(het_failed_ids)

    if ibd_file != "":
        # high IBD - pi_hat threshold
        ibd = pd.read_csv(ibd_file, delimiter=" ", skipinitialspace=True)
        print("total ibd failures: ", ibd.shape[0])
        ibd_ids = ibd['IID1'].tolist()
        ids['Cryptic Relatedness'] = ibd_ids
        ids_list.append(ibd_ids)

    fail_counts = [len(vals) for key,vals in ids.items()]
    #total_fails = set(x for l in ids_list for x in l)
    total_fails = sum(fail_counts)
    print("total samples failed: {}/{}".format(total_fails, imiss.shape[0]))


    fig = plt.figure(figsize=(8,6))
    plt.tight_layout()
    plt.bar(x=list(ids.keys()), height=fail_counts)
    plt.title("Samples failing QC checks (total: {}/{})".format(total_fails, imiss.shape[0]))
    plt.xlabel("QC Test")
    plt.ylabel("Number of samples")
    plt.tick_params(axis='x', rotation=90)

    if write:
        write_fail_file(ids, "failed_sample_ids")

    return fig
