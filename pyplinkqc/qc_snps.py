import pandas as pd
import matplotlib.pyplot as plt
from . import qc_plot
from . import qc_report
from . import qc_filter

# default names for files:
# miss_out = "plink"
# snp_filtered = "snp_missingness_filtered"
# maf_check = "MAF_check.frq"
# maf_filtered = "maf_filtered"
# hwe_check = "plink.hwe"
# hwe_filtered = "hwe_filtered"

def check_snp_missingness(bfile: str, miss_out: str="plink",
                          snp_missingness_cutoff: float=0.2,
                          bfile_out: str="snp_missingness_filtered"):
    """Filters SNPs with high missingness rates.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bed, .bim, .fam)
    miss_out: str
        file to write missingness report to
    snp_missingness_threshold: float
        threshold to use for SNPs missingness rate
    bfile_out: str
        prefix for the output plink binary files

    Returns:
    --------
    missing_figs: object
        matplotlib figure object showing SNP missingness rates
    """
    qc_report.missingness_report(bfile=bfile, outfile=miss_out)
    missing_figs = qc_plot.plot_missingness_hist(miss_file=miss_out)
    qc_filter.snp_genotype_filter(bfile=bfile, threshold=snp_missingness_cutoff,
                               outfile=bfile_out)
    return missing_figs

def check_maf(bfile: str="snp_missingness_filtered", get_autosomal: bool=False,
             maf_check: str="MAF_check.frq", maf_threshold: float=0.01,
             bfile_out: str="maf_filtered"):
    """Filters SNPs with high missing allele frequencies.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bed, .bim, .fam)
    get_autosomal: bool
        determines whether to filter SNPs on autosomal chromosomes
    maf_check: str
        prefix for the maf check report output file
    maf_threshold: float
        maf threshold to use for filtering SNPs
    bfile_out: str
        prefix for the output plink binary files

    Returns:
    --------
    maf_check_figs: object
        matplotlib figure object showing SNP MAF rates
    maf_drop_figs: object
        matplotlib figure object showing SNP MAF rates after dropping SNPs that
        exceeded the maf_threshold
    """
    if get_autosomal:
        auto_out = "snp_1_22.txt"
        auto_df = qc_filter.autosomal_snps_filter(bfile=bfile, outfile=auto_out)
        bfile_tmp = "maf_auto"
        qc_filter.select_autosomal_snp(bfile=bfile, auto_file=auto_out,
                                    outfile=bfile_tmp)
        bfile = bfile_tmp
    qc_report.maf_check_report(bfile=bfile)
    maf_check_figs = qc_plot.plot_maf_hist(file=maf_check)
    maf_filtered = qc_filter.maf_filter(bfile=bfile, threshold=maf_threshold,
                                     outfile=bfile_out)
    maf_drop_figs = qc_plot.plot_maf_dropped_hist()
    return maf_check_figs, maf_drop_figs

def check_hwe(bfile: str="maf_filtered", hwe_check: str="plink.hwe",
              hwe_threshold: float=1e-6, control: bool=True,
              bfile_out: str="hwe_filtered"):
    """Filters SNPs with outlying hardy-weinberg equilibrium results.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bed, .bim, .fam)
    hwe_check: str
        file to write hwe_check results to
    hwe_threshold: float
        threshold for HWE test
    control: bool
        indicates whether to only apply HWE test to controls
    bfile_out: str
        prefix for the output plink binary files

    Returns:
    --------
    hwe_figs: object
        matplotlib figure object showing SNP HWE results
    """
    qc_report.hardy_weinberg_report(bfile=bfile)
    hwe_figs = qc_plot.plot_hwe_hist(file=hwe_check, threshold=hwe_threshold)
    qc_filter.hardy_weinberg_filter(bfile=bfile, threshold=hwe_threshold,
                                 control=control, outfile=bfile_out)
    return hwe_figs

def snps_failed_gen_report(bfile: str, figures_list: list, write: bool=False,
                           snp_missingness_threshold: float=0.2,
                           maf_threshold: float=0.01, hwe_threshold: float=1e-6,
                           lmiss_file: str="plink.lmiss",
                           maf_file: str="MAF_check.frq",
                           hwe_file: str="plink.hwe"):
    """Generate SNPs QC report.

    Key arguments:
    --------------
    bfile: str
        prefix for plink binary files (.bed, .bim, .fam)
    figures_list: list
        list of figures to write to the report
        (generated by the rest of the functions in this module)
    write: bool
        determines whether to write out failed sample ids
    snp_missingness_threshold: float
        threshold for filtering snps with high missingness rates
    maf_threshold: float
        threshold for filtering SNPs with high MAF
    hwe_threshold: float
        threshold used for HWE test
    lmissfile: str
        file containing SNPs with high missingness rates
        (generated by check_snps_missingness function)
    maf_file: str
        file containing SNPs with outlying MAF
        (generated by check_maf function)
    hwe_file: str
        file containing SNPs with outlying HWE
        (generated by check_hwe function)

    Returns:
    --------
    """
    snps_failed_fig = qc_report.snps_failed_report(miss_threshold=snp_missingness_threshold,
                                                   maf_threshold=maf_threshold,
                                                   hwe_threshold=hwe_threshold,
                                                   lmiss_file=lmiss_file,
                                                   maf_file=maf_file, hwe_file=hwe_file)
    report_file = bfile + "_snps_qc"
    qc_report.save_pdf(report_file, figures_list)
